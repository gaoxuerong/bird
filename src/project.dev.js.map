{"version":3,"sources":["assets/scripts/Background.js","assets/scripts/Bird.js","assets/scripts/Constant.js","assets/scripts/Game.js","assets/scripts/Pipe.js","assets/scripts/Storage.js"],"names":["cc","Class","extends","Component","properties","groundNode","Node","groundImg","Sprite","move_interval","move_speed","onLoad","this","_size","winSize","_width","spriteFrame","getRect","width","schedule","onGroundMove","x","gravity","birdJump","velocity","onStartDrop","onDrop","onJump","node","y","Constant","Enum","GROUND_MOVE_INTERVAL","GROUND_VX","PIPE_UP","PIPE_DOWN","GAMEOVER_TXT","HIGHSCORE_TXT","module","exports","Bird","require","Background","Storage","pipeMaxOffsetY","pipeMinGap","pipeMaxGap","pipeSpawnInterval","scoreScaleDuration","pipeSpawnOffsetX","gameReflashTime","pipesNode","default","type","pipePrefabs","Prefab","gameMenu","bird","background","jumpAudio","url","AudioClip","gameOverText","Label","curScoreText","highScoreText","string","active","setInputControl","size","pipes","isGameOver","curScore","groundBox","getBoundingBox","groundTop","height","getHighScore","on","EventType","TOUCH_START","bind","audioEngine","playEffect","onStartGame","spawnPipes","gameUpdate","pipeUp","instantiate","getComponent","init","pipeHeight","Math","floor","random","pipeDown","pipeGap","addChild","push","birdBox","birdRect","Rect","i","length","curPipeNode","pipeBox","pipeRect","intersects","onGameOver","curPipe","isPassed","addScore","splice","removeChild","log","action1","scaleTo","action2","action3","runAction","sequence","setHighScore","unscheduleAllCallbacks","director","loadScene","score","sys","localStorage","getItem","parseInt","setItem"],"mappings":"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","sourcesContent":["cc.Class\r\n({\r\n    extends: cc.Component,\r\n\r\n    properties:\r\n    {\r\n       //地板的数组的节点\r\n       groundNode:[cc.Node],\r\n       //地板图片\r\n       groundImg:cc.Sprite,\r\n       //单位时间\r\n       move_interval:0.05,\r\n       //单位偏移量\r\n       move_speed:-5,\r\n    },\r\n\r\n    \r\n    onLoad: function () \r\n    {\r\n        //屏幕尺寸\r\n        this._size = cc.winSize;\r\n        //地板宽度\r\n        this._width = this.groundImg.spriteFrame.getRect().width;\r\n        //启动定时器\r\n        this.schedule(this.onGroundMove,this.move_interval)\r\n    },\r\n    onGroundMove: function(){\r\n        \r\n        this.groundNode[0].x +=this.move_speed;\r\n         this.groundNode[1].x +=this.move_speed;\r\n         if( this.groundNode[0].x+this._width/2 < - this._size.width/2){\r\n             \r\n             this.groundNode[0].x = this.groundNode[1].x + this._width-5;\r\n         }\r\n         if( this.groundNode[1].x+this._width/2 < - this._size.width/2){\r\n             \r\n             this.groundNode[1].x = this.groundNode[0].x + this._width-5;\r\n         }\r\n         \r\n    }\r\n    \r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        //加速度\r\n      gravity:0.5,\r\n      birdJump:6.6,\r\n    },\r\n//onLoad类似于c++的构造函数\r\n    onLoad: function ()\r\n    {\r\n        //初始速度\r\n        this.velocity = 0;\r\n    },\r\n\r\n    onStartDrop:function () {\r\n        this.schedule(this.onDrop,1/60);\r\n    },\r\n    onJump:function(){\r\n        this.velocity = this.birdJump;\r\n    },\r\n    onDrop:function () {\r\n        this.node.y += this.velocity;\r\n        this.velocity -= this.gravity;\r\n    }\r\n\r\n});\r\n","var Constant = cc.Enum({\r\n    // 地板移动时间间隔\r\n    GROUND_MOVE_INTERVAL: 0.05,\r\n    // 单位时间地板移动速度\r\n    GROUND_VX: -5,\r\n    // 上端管道序号为0\r\n    PIPE_UP: 0,\r\n    // 下端管道序号为1\r\n    PIPE_DOWN: 1,\r\n    // 游戏失败文字\r\n    GAMEOVER_TXT: 'GAME OVER',\r\n    // 最高分文字\r\n    HIGHSCORE_TXT: 'HighScore: ',\r\n});\r\n\r\nmodule.exports = Constant;\r\n\r\n","const Bird = require('Bird');\r\nconst Background = require('Background');\r\nconst Constant = require('Constant');\r\nvar Storage = require('Storage')\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties:\r\n        {\r\n            // 管道纵向最大偏移值\r\n            pipeMaxOffsetY: 150,\r\n            // 上下管道间最小间隙\r\n            pipeMinGap: 80,\r\n            // 上下管道间最大间隙\r\n            pipeMaxGap: 200,\r\n            // 管道生成时间间隔\r\n            pipeSpawnInterval: 4.5,\r\n            // 形变动画播放间隔\r\n            scoreScaleDuration: 0.2,\r\n            // 管道生成时，屏幕外横向偏移位置\r\n            pipeSpawnOffsetX: 30,\r\n            // 重新刷新时间\r\n            gameReflashTime: 5,\r\n            // 管道创建节点\r\n            pipesNode: {\r\n                default: null,\r\n                type: cc.Node\r\n            },\r\n            // 管道预制数组\r\n            pipePrefabs: {\r\n                default: [],\r\n                type: [cc.Prefab]\r\n            },\r\n            //菜单节点\r\n            gameMenu:cc.Node,\r\n            //小鸟对象\r\n            bird:Bird,\r\n            // 地板对象\r\n            background: {\r\n                default: null,\r\n                type: Background\r\n            },\r\n            //小鸟弹跳音效\r\n            jumpAudio:\r\n                {\r\n                    default:null,\r\n                    url:cc.AudioClip\r\n                },\r\n            // 游戏失败文字标签\r\n            gameOverText: {\r\n                default: null,\r\n                type: cc.Label\r\n            },\r\n            // 当前分数标签\r\n            curScoreText: {\r\n                default: null,\r\n                type: cc.Label\r\n            },\r\n            // 最高分标签\r\n            highScoreText: {\r\n                default: null,\r\n                type: cc.Label\r\n            },\r\n\r\n        },\r\n\r\n    onLoad: function ()\r\n    {\r\n        this.gameOverText.string = '';\r\n        this.curScoreText.node.active = false;\r\n        //初始化屏幕点击事件\r\n        this.setInputControl();\r\n        // 获取屏幕尺寸\r\n        this.size = cc.winSize;\r\n        // 初始化管道数组\r\n        this.pipes = [];\r\n        // 初始化游戏失败标志位\r\n        this.isGameOver = false;\r\n        // 初始化当前分数\r\n        this.curScore = 0;\r\n        // 获取地板的包围盒\r\n        var groundBox = this.background.groundNode[0].getBoundingBox();\r\n        // 获取地板顶部的纵坐标\r\n        this.groundTop = groundBox.y + groundBox.height;\r\n        // 开始游戏界面，如有历史最高分则显示该成绩\r\n        if ( Storage.getHighScore() > 0 )\r\n        {\r\n            this.highScoreText.string = Constant.HIGHSCORE_TXT + Storage.getHighScore();\r\n        }\r\n    },\r\n\r\n    setInputControl:function()\r\n    {\r\n        this.node.on(cc.Node.EventType.TOUCH_START,this.birdJump.bind(this));\r\n    },\r\n\r\n    birdJump:function()\r\n    {\r\n        cc.audioEngine.playEffect(this.jumpAudio,false);\r\n        this.bird.onJump();\r\n    },\r\n\r\n    onStartGame:function()\r\n    {\r\n        this.curScoreText.node.active = true;\r\n        this.gameMenu.active = false;\r\n        this.bird.onStartDrop();\r\n        // 启动管道生成定时器\r\n        this.schedule(this.spawnPipes, this.pipeSpawnInterval);\r\n        // 启动游戏逻辑更新定时器\r\n        this.schedule(this.gameUpdate, 0.05);\r\n    },\r\n\r\n    spawnPipes: function()\r\n    {\r\n        // 从管道预制（上端），生成管道实例\r\n        var pipeUp = cc.instantiate(this.pipePrefabs[0]);\r\n        // 定义为上端类型\r\n        pipeUp.getComponent('Pipe').init(0);\r\n        // 获取管道的高度（上端与上端的相同）\r\n        var pipeHeight = pipeUp.getComponent('cc.Sprite').spriteFrame.getRect().height;\r\n        // 设置上端管道的横向起始位置（屏幕右端另加一定偏移）\r\n        pipeUp.x = this.size.width / 2 + this.pipeSpawnOffsetX;\r\n        // 设置上端管道的纵向起始位置（随机取偏移量）\r\n        pipeUp.y = Math.floor(Math.random() * this.pipeMaxOffsetY) + pipeHeight/2;\r\n        // 下端生成逻辑基本与上端相同\r\n        var pipeDown = cc.instantiate(this.pipePrefabs[1]);\r\n        pipeDown.getComponent('Pipe').init(1);\r\n        pipeDown.x = this.size.width / 2 + this.pipeSpawnOffsetX;\r\n        // 随机生成上端与下端管道之间的间隙值（pipeMinGap与pipeMaxGap之间）\r\n        var pipeGap = Math.floor(Math.random() * (this.pipeMaxGap - this.pipeMinGap)) + this.pipeMinGap + 20;\r\n        pipeDown.y = pipeUp.y - pipeGap - pipeHeight;\r\n        // 添加管道到pipes节点上\r\n        this.pipesNode.addChild(pipeUp);\r\n        this.pipesNode.addChild(pipeDown);\r\n        // 添加管道到管道数组中\r\n        this.pipes.push(pipeUp);\r\n        this.pipes.push(pipeDown);\r\n    },\r\n\r\n    gameUpdate: function()\r\n    {\r\n        // 获取小鸟的包围盒\r\n        var birdBox = this.bird.node.getBoundingBox();\r\n        var birdRect = new cc.Rect(birdBox.x, birdBox.y,\r\n            birdBox.width, birdBox.height);\r\n        for ( var i = 0; i < this.pipes.length; i ++ )\r\n        {\r\n            // 获取当前管道对象节点\r\n            var curPipeNode = this.pipes[i];\r\n            // 对管道进行移动操作\r\n            curPipeNode.x += -5;\r\n            var pipeBox = curPipeNode.getBoundingBox();\r\n            var pipeRect = new cc.Rect(pipeBox.x, pipeBox.y,\r\n                pipeBox.width, pipeBox.height);\r\n            // 根据两个矩形范围判断是否相交\r\n            if (pipeRect.intersects(birdRect)) {\r\n                this.onGameOver();\r\n                return;\r\n            }\r\n            // 获取当前管道对象\r\n            var curPipe = curPipeNode.getComponent('Pipe');\r\n            // 判断小鸟是否顺利通过管道，是则加分\r\n            if ( curPipeNode.x < this.bird.node.x && curPipe.isPassed === false\r\n                && curPipe.type === 0) {\r\n                curPipe.isPassed = true;\r\n                this.addScore();\r\n            }\r\n\r\n            // 超出屏幕范围的管道，从数组中移除，并从节点上删除\r\n            if ( curPipeNode.x < -(this.size.width/2 + this.pipeSpawnOffsetX))\r\n            {\r\n                this.pipes.splice(i, 1);\r\n                this.pipesNode.removeChild(curPipeNode, true);\r\n            }\r\n        }\r\n\r\n        // 小鸟触地或者撞天花板，则死亡\r\n        if (this.bird.node.y < this.groundTop || this.bird.node.y > this.size.height/2 - birdBox.height/2)\r\n        {\r\n            this.onGameOver();\r\n        }\r\n\r\n    },\r\n\r\n    addScore: function()\r\n    {\r\n\r\n        // 加分\r\n        this.curScore ++;\r\n        cc.log(this.curScore);\r\n        // 显示当前分数\r\n        this.curScoreText.string = \"\" + this.curScore;\r\n        var action1 = cc.scaleTo(this.scoreScaleDuration, 1.1, 0.6);\r\n        var action2 = cc.scaleTo(this.scoreScaleDuration, 0.8, 1.2);\r\n        var action3 = cc.scaleTo(this.scoreScaleDuration, 1, 1);\r\n        // 播放形变动画\r\n        this.curScoreText.node.runAction(cc.sequence(action1, action2, action3));\r\n    },\r\n\r\n    onGameOver: function()\r\n    {\r\n        this.curScoreText.node.active = false;\r\n        // 设置游戏失败标志位\r\n        this.isGameOver = true;\r\n        // 死亡时，显示“Game Over”\r\n        this.gameOverText.string = \"a little bird dead hahahaha \";\r\n        // 游戏失败，如超过最高分则成绩更新\r\n        if ( this.curScore > Storage.getHighScore() )\r\n        {\r\n            Storage.setHighScore(this.curScore);\r\n        }\r\n        // 关闭所有定时器\r\n        this.bird.unscheduleAllCallbacks();\r\n        this.background.unscheduleAllCallbacks();\r\n        this.unscheduleAllCallbacks();\r\n        // 一定时间后，重新刷新游戏到开始状态\r\n        this.schedule(function()\r\n        {\r\n            cc.director.loadScene('game');\r\n        }, this.gameReflashTime);\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n});","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // 小鸟通过管道与否的标志位\r\n        isPassed: false,\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n\r\n    },\r\n    \r\n    init: function (type) {\r\n        // 设置管道的类型（上或下）\r\n        this.type = type;\r\n    }\r\n\r\n    \r\n});\r\n","var Storage = {\r\n    getHighScore: function() {\r\n        var score = cc.sys.localStorage.getItem('HighScore') || 0;\r\n        return parseInt(score);\r\n    },\r\n    \r\n    setHighScore: function(score) {\r\n        cc.sys.localStorage.setItem('HighScore', score);\r\n    }\r\n};\r\n\r\nmodule.exports = Storage;"],"sourceRoot":"/source/","file":"project.dev.js"}